<?php

namespace app\api\controller;

use app\common\controller\ApiController;
use think\facade\Session;
use Jenssegers\Agent\Agent;

class User extends ApiController
{
    protected $token_expire_time = 3600 * 24 * 7;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
//        dump($this->getUserInfo());
//        dump($this->isLogin());

        $sessionId = Session::getId();
        // dump($this->uuid());
//        dump('session_id: ' . $sessionId);
        $token1 = hash_hmac('haval256,3', $this->uuid(), substr($sessionId, 0, 22));
        $token2 = hash_hmac('ripemd320', $this->uuid(), substr($sessionId, 0, 22));
//        dump('token1: ' . $token1);
//        dump('token2: ' . $token2);
        $server = $this->request->server();
//        dump($this->request->header());
//        dump($this->request->post());
        $agent = new Agent();

        $uuid = sha1(md5(uniqid(md5(microtime(true)), true)));
        $password = sha1(sha1('hbcall_') . md5('123456') . md5('_encrypt') . sha1('123456'));
        $crypt = md5(crypt('QQX@lyq20151111', 'L9uSPt'));
        return json([
            'code' => 1,
            'data' => [
                'session_id' => $sessionId,
                'header' => $this->request->header(),
                'session' => $sessionId,
                'device' => $agent->device() ?: '',
                'platform' => $agent->platform() ?: '',
                'browser' => $agent->browser() ?: '',
                'platformVersion' => $agent->version($agent->platform()) ?: '',
                'browserVersion' => $agent->version($agent->browser()) ?: '',
                'uuid' => $uuid,
                'uuid2' => strlen($uuid),
                'uuid3' => password_hash('123456', PASSWORD_BCRYPT),
                'token' => $password,
                'password' => getEncryptPassword('123456'),
                'password_hash' => password_hash('123456' . '_hbcall', PASSWORD_DEFAULT),
                'password_verify' => password_verify('123456' . '_hbcall', '$2y$10$z9Y0yMaiEmoSQ71m70JGyehZle1zHgboB9yEDOQUobhNzErotnRWe'),
                'thinkphp_token' => request()->buildToken(),
                'crypt' => password_get_info('$2y$10$wV9EfCKJFnf61G4B6iWhde6OQazaV5vfldRNpAmFUaqdWswxUlqFi')
            ],
            'msg' => '请求成功'
        ]);
    }

    /**
     * 获取全球唯一标识
     * @return string
     */
    public function uuid()
    {
        return sprintf(
            '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0x0fff) | 0x4000,
            mt_rand(0, 0x3fff) | 0x8000,
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff)
        );
    }

    public function login()
    {
        /*if ($this->isLogin()) {
            $this->returnData['code'] = 1;
            $this->returnData['msg'] = lang('You are already logged in');
            $this->returnData['data'] = Session::get('api_user');
            return json($this->returnData);
        }*/

        if ($this->request->isPost()) {
            /*$check = $this->request->checkToken('__token__');
            if(false === $check) {
                $token = $this->request->buildToken();
                return json(['data' => ['token' => $token], 'msg' => lang('Invalid token') . '，请重新提交', 'code' => 0]);
            }*/
            $agent = new Agent();

            $param = $this->request->param();

            $login_ip = $this->request->server();

            if (!isset($param['username']) || trim($param['username']) === '') {
                $this->returnData['msg'] = '参数错误：缺少 username';
                return json($this->returnData);
            }

            if (!isset($param['password']) || trim($param['password']) === '') {
                $this->returnData['msg'] = '参数错误：缺少 password';
                return json($this->returnData);
            }

            $model = ucfirst($this->userType) . 'Model';
            $user = $this->$model::getByUsername($param['username']);

            if (!$user) {
                $this->returnData['msg'] = lang('Account is incorrect');
                return json($this->returnData);
            }

            if (!$user->getData('status')) {
                $this->returnData['msg'] = lang('Account is locked');
                return json($this->returnData);
            }

            $password = getEncryptPassword($param['password'], $user->salt);
            if ($password !== $user->password) {
                $this->returnData['msg'] = lang('Password is incorrect');
                return json($this->returnData);
            }

            $now = time();
            $user->prevtime = $user->getData('logintime');
            $user->logintime = $now;
            $user->loginip = $this->request->ip();
            $user->token = createToken($password);
            $user->token_expire_time = $now + $this->token_expire_time;
            $user->platform = $agent->platform() ?: '';
            $user->platform_version = $agent->version($agent->platform()) ?: '';
            $user->browser = $agent->browser() ?: '';
            $user->browser_version = $agent->version($agent->browser()) ?: '';
            $user->device = $agent->device() ?: '';
            $user->save();

            Session::set('api_' . $this->userType, $user->toArray());

            $this->returnData['code'] = 1;
            $this->returnData['msg'] = lang('logined');
            $this->returnData['data'] = $user->hidden(['password', 'salt'])->toArray();

            return json($this->returnData);
        }

        return json($this->returnData);
    }

    public function getUserProfile()
    {
        return json($this->getUserInfo());
    }

    public function checkLogin()
    {
        $this->returnData['code'] = 1;
        $this->returnData['msg'] = 'Success';
        $this->returnData['data'] = [
            'login' => $this->isLogin(),
        ];

        return json($this->returnData);
    }

    public function logout()
    {
        Session::delete('api_' . $this->userType);
        $this->userInfo->token = '';
        $this->userInfo->token_expire_time = 0;
        $this->userInfo->save();
        $this->returnData['code'] = 1;
        $this->returnData['msg'] = '退出成功';
        return json($this->returnData);
    }
}
