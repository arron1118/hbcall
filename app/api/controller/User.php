<?php

namespace app\api\controller;

use app\common\controller\ApiController;
use app\common\library\Aes;
use app\common\model\Expense;
use think\facade\Session;
use app\common\traits\UserTrait;

class User extends ApiController
{
    use UserTrait;

    protected $token_expire_time = 3600 * 24 * 7;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $this->returnData['code'] = 1;
        $this->returnData['msg'] = 'success';

        $sessionId = Session::getId();

        $aesEncodeData = 'lFzJrxqaQle6gIcD/1Jh4LWMwblh7/Jzwv1ylTyw+LCUd3GSETsnHAqgJFzhjWTTth4W/HgcMtNGYhkGwXzVRnrTRdNNDuX4Etf94mS0Ex8aicPJSFUfhBRuCjdA1SIqbyy3V1CZsM1Sk/vARi1CD7hoHTYlnLus6tP1Wg83zLBZ2pzOgv0iF19OWY0f1BmK5nrkhMfPVBNR2t8GemYiPgTTMlb3rQ87GM7b3xgg4R4t+S2iVrG5yex1dc7qqWjMJZnonIVZKkIXFdo46NrpAe/Z94t+VZpKkxewLyxzCCAkZnyKgwfZcIE+4D2kC6mX+1zU5MANZRLzNktPFsr8OBBB7mvJ8x1PvABwLtapNHDaqoVrwJLdLC3pgtNXfozM/RZVLUA5hw46zYM+IKs8IiRH4wQOazU4A62CcThiBxvuk8ONE67SDUl9aIFmOI6coJjIemgjlumPYINQ/z6Fe33ShScGOnvld25yAT4SdaEjQ0oI9kdtl9146r7xYwmwT2GMFCQ1gHuoEec1CSrJa7g90a3Bj1Dc40ggzMpQNjhg1MRA68CM/l7cwJAdwPyQ9oKyhrs8gN2eqqYioTzzO4nxszBLhxjUvqwrhIhTX7+XPa2f682umZCf+aRs37p0zJhB9hpmNR07o8RbemVp7dFrGr4Mb85ztTRbQOBU9lf9miNZrgoLs1qHQEZyBa32x2xVPa4+U0LaZlHt9gP0f0X1jiXfbuQwTjxwYWL3p7U=';
        $this->returnData['data'] = [
            'openssl_config' => $this->aes->getConfig(),
            'openssl_encrypt' => $this->aes->aesEncode(json_encode(1, JSON_UNESCAPED_UNICODE)),
            'openssl_decrypt_json' => json_decode($this->aes->aesDecode($aesEncodeData), JSON_UNESCAPED_UNICODE),
        ];

        return json($this->returnData);
    }

    /**
     * 获取全球唯一标识
     * @return string
     */
    public function uuid()
    {
        return sprintf(
            '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0x0fff) | 0x4000,
            mt_rand(0, 0x3fff) | 0x8000,
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff)
        );
    }

    /**
     * 用户登录
     * @return \think\response\Json
     */
    public function login()
    {
        if ($this->request->isPost()) {
            $param = $this->request->param();

            if (!isset($param['username']) || trim($param['username']) === '') {
                $this->returnData['msg'] = '参数错误：缺少 username';
                return json($this->returnData);
            }

            if (!isset($param['password']) || trim($param['password']) === '') {
                $this->returnData['msg'] = '参数错误：缺少 password';
                return json($this->returnData);
            }

            $model = ucfirst($this->userType) . 'Model';
            $user = $this->$model::where('username', $param['username'])
                ->find();

            if (!$user) {
                $this->returnData['msg'] = lang('Account is incorrect');
                return json($this->returnData);
            }

            if (!$user->getData('status')) {
                $this->returnData['msg'] = lang('Account is locked');
                return json($this->returnData);
            }

            $password = getEncryptPassword($param['password'], $user->salt);
            if ($password !== $user->password) {
                $this->returnData['msg'] = lang('Password is incorrect');
                return json($this->returnData);
            }

            $now = time();
            $user->prevtime = $user->getData('logintime');
            $user->logintime = $now;
            $user->loginip = $this->request->ip();
            $user->token = createToken($password);
            $user->token_expire_time = $now + $this->token_expire_time;
            $user->platform = $this->agent->platform();
            $user->platform_version = $this->agent->version($this->agent->platform());
            $user->browser = $this->agent->browser();
            $user->browser_version = $this->agent->version($this->agent->browser());
            $user->device = $this->agent->device();
            $user->save();

            $where = [$this->userType . '_id' => $user->id];
            $user->yesterday_duration = Expense::where($where)
                ->whereRaw("date_format(date_sub(now(), interval 1 day), '%Y-%m-%d') = from_unixtime(createtime, '%Y-%m-%d')")
                ->sum('duration');
            $user->today_duration = Expense::where($where)
                ->whereRaw("date_format(now(), '%Y-%m-%d') = from_unixtime(createtime, '%Y-%m-%d')")
                ->sum('duration');

            Session::set('api_' . $this->userType, $user->toArray());

            $this->returnData['code'] = 1;
            $this->returnData['msg'] = lang('logined');
            $this->returnData['data'] = $user->hidden(['password', 'salt'])->toArray();

            return json($this->returnData);
        }

        return json($this->returnData);
    }

    public function getUserProfile()
    {
        return json($this->getUserInfo());
    }

    public function checkLogin()
    {
        $this->returnData['code'] = 1;
        $this->returnData['msg'] = 'Success';
        $this->returnData['data'] = [
            'login' => $this->isLogin(),
        ];

        return json($this->returnData);
    }

    public function logout()
    {
        Session::delete('api_' . $this->userType);
        $this->userInfo->token = '';
        $this->userInfo->token_expire_time = 0;
        $this->userInfo->save();
        $this->returnData['code'] = 1;
        $this->returnData['msg'] = '退出成功';
        return json($this->returnData);
    }
}
