<?php

namespace app\company\controller;

use app\common\controller\CompanyController;
use app\common\model\CallHistory;
use app\common\model\Expense;
use app\company\model\Company;
use arron\Random;
use think\facade\Db;
use think\facade\Session;

class Index extends CompanyController
{
    protected $lang = [];

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->lang = [
            'totalCallHistory' => '总记录',
            'totalGtZero' => '接听数',
            'totalGtSixty' => '大于1分钟',
            'totalBetweenZeroAndSixty' => '1分钟内',
            'totalBetweenOneToThree' => '1-3分钟',
            'totalBetweenThreeToFive' => '3-5分钟内',
            'totalGtFive' => '大于5分钟',
            'totalEqZero' => '未接听',
        ];
    }

    public function index()
    {
        return $this->view->fetch();
    }

    public function dashboard()
    {
//        dump(1000003.210 + 5.00);

        $costs = getCosts(Session::get('company.id'));
        $this->view->assign($costs);
        return $this->view->fetch();
    }

    public function getReport()
    {
        if ($this->request->isPost()) {
            $where = ['company_id' => $this->userInfo->id];
            $result['totalCallHistory'] = CallHistory::where($where)->count();
            $result['totalCallAndPickUp'] = CallHistory::where($where)->where('call_duration', '>', 0)->count();
            $result['totalCallAndNoPickUp'] = CallHistory::where('call_duration', '=', 0)->count();
            $result['totalCallDuration'] = Expense::where($where)->sum('duration');
            $result['chartData'] = [
                [
                    'name' => $this->lang['totalBetweenZeroAndSixty'],
                    'value' => CallHistory::whereBetween('call_duration', [1, 60])->count()
                ],
                [
                    'name' => $this->lang['totalBetweenOneToThree'],
                    'value' => CallHistory::whereBetween('call_duration', [61, 180])->count()
                ],
                [
                    'name' => $this->lang['totalBetweenThreeToFive'],
                    'value' => CallHistory::whereBetween('call_duration', [181, 300])->count()
                ],
                [
                    'name' => $this->lang['totalGtFive'],
                    'value' => CallHistory::where('call_duration', '>', 300)->count()
                ]
            ];
            $this->returnData['code'] = 1;
            $this->returnData['data'] = $result;
            $this->returnData['msg'] = 'success';
            return json($this->returnData);
        }

        return json($this->returnData);
    }

    public function getHoursData()
    {
        if ($this->request->isPost()) {
            $hours = $this->request->param('hours', 7);
            $sql = <<<SQL
select date_format(t3.datetime, '%m-%d %H:%i'), max(t3.sum) as sum
from (
         SELECT date_format(@cdate := date_add(@cdate, interval -1 hour), '%Y-%m-%d %H') datetime, 0 as sum
         from (SELECT @cdate := DATE_ADD(date_format(current_timestamp(), '%Y-%m-%d %H'), INTERVAL 1 hour)
               from hbcall_call_history
               ) t1
         UNION ALL
         select date_format(from_unixtime(createtime), '%Y-%m-%d %H') as datetime, count(*) as sum
         from hbcall_call_history
         where company_id = {$this->userInfo->id}
         GROUP BY datetime
     ) t3
where  t3.datetime between date_add(date_format(current_timestamp(), '%Y-%m-%d %H'), interval -{$hours} hour) and date_format(current_timestamp(), '%Y-%m-%d %H')
GROUP BY t3.datetime
order by t3.datetime;
SQL;

            $res = Db::query($sql);
            $this->returnData['data'] = $res;
            $this->returnData['msg'] = 'success';
            $this->returnData['code'] = 1;
            return json($this->returnData);
        }

        return json($this->returnData);
    }

    public function getTopList()
    {
        if ($this->request->isPost()) {
            $result = \app\common\model\User::withCount(['callHistory' => function ($query, &$alias) {
                $query->where('call_duration', '>', 0);
                $alias = 'callHistory_pickup_count';
            }])
                ->withCount(['callHistory' => function ($query, &$alias) {
                    $query->where('call_duration', '=', 0);
                    $alias = 'callHistory_count';
                }])
                ->where('company_id', $this->userInfo->id)
                ->withSum('expense', 'cost')
                ->withSum(['expense' => 'duration_sum'], 'duration')
                ->order('callHistory_count', 'desc')
                ->limit(5)
                ->select();

            $this->returnData['code'] = 1;
            $this->returnData['data'] = $result;
            $this->returnData['msg'] = 'success';
            return json($this->returnData);
        }
        return json($this->returnData);
    }

    public function login()
    {
        if (Session::has('company')) {
            return redirect(url('/index'));
        }

        if ($this->request->isPost()) {
            /*$check = $this->request->checkToken('__token__');
            if(false === $check) {
                $token = $this->request->buildToken();
                return json(['data' => ['token' => $token], 'msg' => lang('Invalid token') . '，请重新提交', 'code' => 0]);
            }*/

            $param = $this->request->param();
            $user = Company::getByUsername($param['username']);
            if (!$user) {
                return json(['data' => [], 'msg' => lang('Account is incorrect'), 'code' => 0]);
            }

            if (!$user->getData('status')) {
                return json(['data' => [], 'msg' => lang('Account is locked'), 'code' => 0]);
            }

            $password = getEncryptPassword($param['password'], $user->salt);
            if ($password !== $user->password) {
                return json(['data' => [], 'msg' => lang('Password is incorrect'), 'code' => 0]);
            }

            if (!captcha_check($param['captcha'])) {
                return json(['data' => [], 'msg' => lang('Captcha is incorrect'), 'code' => 0]);
            }

            $user->prevtime = $user->getData('logintime');
            $user->logintime = time();
            $user->loginip = $this->request->ip();

            $user->save();

            Session::set('company', $user->toArray());

            return json(['data' => [], 'msg' => lang('Logined'), 'code' => 1, 'url' => (string)url('/index')]);
        }
        return $this->view->fetch();
    }

    public function logout()
    {
        $this->delSession();
        return redirect((string) url('/index/login'));
    }

}
