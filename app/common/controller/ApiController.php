<?php


namespace app\common\controller;

use think\facade\Session;
use app\common\model\User as UserModel;
use app\company\model\Company as CompanyModel;
use app\common\library\Aes;
use think\Response;

class ApiController extends \app\BaseController
{
    protected $noNeedLogin = ['login', 'getAesEncodeData', 'getAesDecodeData'];

    protected $userInfo = null;

    protected $userType = 'user';

    protected $UserModel = null;

    protected $CompanyModel = null;

    protected $model = null;

    protected $token = null;

    protected $aes = null;

    protected $returnData = [
        'code' => 0,
        'msg' => '未知错误',
        'data' => [],
//        'sub_code' => 'unknow error',
//        'sub_msg' => '系统繁忙',
    ];

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->aes = new Aes();
        $this->UserModel = UserModel::class;
        $this->CompanyModel = CompanyModel::class;
        $param = $this->getRequestParams();
        $this->userType = isset($param['userType']) ? $param['userType'] : null;
        $this->token = isset($param['token']) ? $param['token'] : null;
        $action = $this->request->action();

        if (!in_array($action, $this->noNeedLogin)) {
            if (!$this->token) {
                response(['code' => 5003, 'msg' => '权限不足：未登录'], 200, [], 'json')->send();
                exit;
            }

            if (!$this->userType) {
                $this->returnData['msg'] = '未提供正确的参数：userType';
                response($this->returnData, 200, [], 'json')->send();
                exit;
            }

            if ($this->userType === 'user') {
                $this->userInfo = UserModel::where('token', $this->token)->find();
            } else if ($this->userType === 'company') {
                $this->userInfo = CompanyModel::where('token', $this->token)->find();
            }

            if (!$this->userInfo) {
                response(['code' => 5003, 'msg' => '用户不存在或未登录'], 200, [], 'json')->send();
                exit;
            }

            if ($this->userInfo->token_expire_time < time()) {
                response(['code' => 5003, 'msg' => '登录过期，请重新登录'], 200, [], 'json')->send();
                exit;
            }
        }
    }

    public function getUserInfo()
    {
        return $this->userInfo->hidden(['salt', 'password'])->toArray();
    }

    protected function isLogin()
    {
        return $this->userInfo;
    }

    /**
     * 输出结果集并退出程序
     */
    protected function returnApiData()
    {
        $this->returnData['data'] = $this->aes->aesEncode(json_encode($this->returnData['data'], JSON_UNESCAPED_UNICODE));
        response($this->returnData, 200, [], 'json')->send();
        exit;
    }

    /**
     * 获取加密的请求数据
     * @param string $param
     * @return mixed
     */
    protected function getRequestParams($param = 'params')
    {
        $data = $this->request->param($param);
        return json_decode($this->aes->aesDecode($data), JSON_UNESCAPED_UNICODE);
    }

    /**
     * 获取加密后的用户数据
     */
    public function getAesEncodeData()
    {
        $this->returnData['data'] = $this->request->param();
        $this->returnData['code'] = 1;
        $this->returnData['msg'] = 'success';
        $this->returnApiData();
    }

    /**
     * 获取解密后的请求数据
     * @param string $param
     * @return \think\response\Json
     */
    public function getAesDecodeData($param = 'params')
    {
        $this->returnData['data'] = $this->getRequestParams($param);
        $this->returnData['msg'] = 'success';
        $this->returnData['code'] = 1;
        return json($this->returnData);
    }
}
